<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giovanni Bernini - Desenvolvedor Web</title>
  
  <subtitle>Blog pessoal de um desenvolvedor web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://giovannibernini.com.br/"/>
  <updated>2020-08-11T03:13:02.884Z</updated>
  <id>https://giovannibernini.com.br/</id>
  
  <author>
    <name>Giovanni Bernini</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Transformando uma aplicação React em um aplicativo nativo (Parte 2)</title>
    <link href="https://giovannibernini.com.br/transformando-uma-aplicacao-react-em-um-aplicativo-nativo-parte-2/"/>
    <id>https://giovannibernini.com.br/transformando-uma-aplicacao-react-em-um-aplicativo-nativo-parte-2/</id>
    <published>2020-08-11T01:51:44.000Z</published>
    <updated>2020-08-11T03:13:02.884Z</updated>
    
    <content type="html"><![CDATA[<p><em>Separei esse artigo em duas partes. Na segunda parte que você está lendo agora, entrarei mais afundo e criarei do zero a arquitetura, explicando passo a passo. Na primeira parte, eu mostro a estrutura de pensamento, que pode ajudar a entender se essa estratégia irá se adequar ao seu caso.</em></p><h2 id="Iniciando-o-projeto"><a href="#Iniciando-o-projeto" class="headerlink" title="Iniciando o projeto"></a>Iniciando o projeto</h2><p>Para essa primeira parte vamos precisar criar dois projetos, um para a aplicação web que será feita em React e outro para a aplicação nativa que será feita com React Native.</p><p>Não será abordado o setup inicial para rodar as aplicações React e React Native, mas você pode ler sobre isso <a href="https://react-native.rocketseat.dev/" target="_blank" rel="noopener">aqui</a>.</p><p>Para este artigo, eu criarei somente um repositório no Github, mas em um caso real onde terá outras pessoas codando, eu prefiro quebrar em dois repositórios para ficar mais organizado.</p><p><em>No fim deste artigo há a URL para o repositório, caso queira pular o passo a passo.</em></p><h2 id="Criacao-da-aplicacao-web-React"><a href="#Criacao-da-aplicacao-web-React" class="headerlink" title="Criação da aplicação web (React)"></a>Criação da aplicação web (React)</h2><p>Para facilitar a criação desse artigo e não misturar com outros assuntos e conceitos, irei usar o CRA (create-react-app) para iniciarmos um projeto React.</p><p>Vamos lá!</p><pre><code>npx create-react-app web</code></pre><p>Com o projeto criado, iremos colocar variáveis de ambiente no script de <em>start</em> e <em>build</em> para diferenciarmos nossa aplicação web e nativa quando precisarmos e adicionar um arquivo de estilos já pronto que vou deixar disponível <a href="https://raw.githubusercontent.com/giioohbernini/web-to-native/master/web/src/index.css" target="_blank" rel="noopener">aqui</a>. Basta copiar e salvar no arquivo index.css.</p><pre><code>&quot;scripts&quot;: {    &quot;start&quot;: &quot;REACT_APP_TARGET=web react-scripts start&quot;,    &quot;start:app&quot;: &quot;REACT_APP_TARGET=app react-scripts start&quot;,    &quot;build&quot;: &quot;REACT_APP_TARGET=web react-scripts build&quot;,    &quot;build:app&quot;: &quot;REACT_APP_TARGET=app react-scripts build&quot;, },</code></pre><p>Agora precisamos criar um útil para recebermos essa informação, então irei criar uma pasta <em>utils</em>, e um arquivo chamado isApp.js com o seguinte código:</p><pre><code>const target = process.env.REACT_APP_TARGETexport default target === &apos;app&apos;</code></pre><p>Com isso pronto, irei adicionar o react-router-dom para criarmos nossas rotas. Caso queira se aprofundar na biblioteca, você pode encontrar mais informações <a href="https://reactrouter.com/web/guides/quick-start" target="_blank" rel="noopener">aqui</a>.</p><p>yarn add react-router-dom ou npm install react-router-dom</p><p>Arquivo: App.js</p><script src="https://gist.github.com/giioohbernini/019e0493566af65f963d94921b537448.js"></script><p>Como mostrado nó código acima, separei em outros arquivos o Root, Home e About para deixar mais organizado.</p><blockquote><p>Arquivo: ./pages/Home/index.js</p></blockquote><script src="https://gist.github.com/giioohbernini/66aa38856d3de7b281941f7946b4b160.js"></script><p>Arquivo: ./pages/About/index.js</p><script src="https://gist.github.com/giioohbernini/07f26a9c06d6e159eb17a625e4041776.js"></script><p>Arquivo: Root.js</p><script src="https://gist.github.com/giioohbernini/b8afe3f7617a3eec18212fea19ec554e.js"></script><p>No código acima, importei um módulo que eu criei chamado postMessage. Esse módulo tem a responsabilidade de se comunicar diretamente com o lado nativo via o método ReactNativeWebView.postMessage, que é inserido no window, assim usamos ele para sempre avisar o aplicativo nativo quando uma rota foi alterada e qual é a nova rota atual. Mais para baixo irei mostrar um caso real de onde podemos usar essa informação.</p><blockquote><p>Arquivo: utils/postMessage.js</p></blockquote><script src="https://gist.github.com/giioohbernini/cf79a525b73f83d960a8c64ea87a680c.js"></script><p>Com essa comunicação podemos fazer várias outras coisas, como alternar entre uma página nativa e uma página web por exemplo.</p><h2 id="Criacao-da-aplicacao-nativa-React-Native"><a href="#Criacao-da-aplicacao-nativa-React-Native" class="headerlink" title="Criação da aplicação nativa (React Native)"></a>Criação da aplicação nativa (React Native)</h2><p>Agora com a parte web já preparada, podemos criar o nosso projeto React Native!</p><p>O comando abaixo vai iniciar o projeto, ele pode demorar um pouco dependendo da sua conexão.</p><pre><code>npx react-native init app --template react-native-web-to-native-template</code></pre><p>Reparem no parâmetro –template, onde eu passo o nome do boilerplate que deixei preparado com algumas coisas que iremos precisar.</p><p>Com o projeto criado, iremos abrir o arquvio webview.js que se encontrará no caminho src &gt; constants &gt; webview.js para atualizarmos a URL inicial do aplicativo o rootUrl. Como estamos trabalhando localmente, iremos colocar localhost com a porta default que o CRA criou para nossa aplicação web que foi a 3000, ficando dessa maneira abaixo:</p><pre><code>export const rootUrl = &apos;http://localhost:3000/&apos;</code></pre><p>Agora iremos rodar o projeto e ver como está!</p><p>yarn ios ou yarn android</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AwVNfRN5CVMqATaR_-17Zw.png" alt></p><p>Com o nosso aplicativo rodando, agora podemos perceber no topo da tela que a barra superior do sistema não bate com a cor da aplicação. De acordo com o estilo já adicionado no começo do artigo, as cores são:</p><script src="https://gist.github.com/giioohbernini/79e117c561ea63adff7461bfeb47df4a.js"></script><p>Com isso, iremos usar a informação que mandamos via postMessage para conseguir manipular a cor do sistema conforme a página atual. Mas antes, iremos ver como a comunicação via postMessage funciona do lado do aplicativo e, para ficar claro, terei que passar por alguns arquivos.</p><blockquote><p>Trecho do arquivo: src/pages/Main/index.js (A página que renderiza o WebView)</p></blockquote><script src="https://gist.github.com/giioohbernini/38d1c04048798b12c9af9b23a8c923c6.js"></script><p>No trecho acima, podemos perceber o uso do onMessage, o callback que o componente WebView irá chamar quando o método ReactNativeWebView.postMessage for executado. No nosso caso estamos passando o handleOnMessage como callback, então vamos ver o que ele está fazendo.</p><blockquote><p>Trecho do arquivo: src/pages/Main/hooks/useWebview.js (Um custom hook que estamos chamando no src/pages/Main/index.js)</p></blockquote><script src="https://gist.github.com/giioohbernini/057eec349f0429956fa55be510e776fa.js"></script><p>No nosso <em>callback,</em> recebemos o evento e conseguimos extrair a informação que foi passada da nossa aplicação web acessando o event.nativeEvent.data. Como enviamos um <em>json </em>formatado como <em>string,</em> pois o postMessage só aceita <em>string</em>, agora podemos transformar nossa <em>string</em> para <em>json</em> de volta.</p><p>O messageEvents faz um papel bem importante de roteamento. Como o método que estamos usando para comunicação não nos fornece nenhuma estrutura (ele apenas transmite texto de um lado para o outro), foi preciso criar essa estrutura de roteamento para facilitar a nossa vida e deixar mais organizado. Na nomenclatura vou usar o termo event para facilitar o entendimento.</p><blockquote><p>Arquivo: src/utils/messageEvents/index.js</p></blockquote><script src="https://gist.github.com/giioohbernini/eb5e9551db3e0d07278822dc31e9dbcc.js"></script><p>Como mostrado acima, usei <a href="https://ramdajs.com/" target="_blank" rel="noopener">RamdaJS</a> para criar essa estrutura (também poderia ser feita com switch case), que pega a propriedade eventName passada da aplicação web e endereça a função que vai receber e lidar com os dados. No caso atual estamos lidando somente com o routeChange que criamos, então vamos entender o que ele está fazendo.</p><blockquote><p>Arquivo: src/utils/messageEvents/routeChange.js</p></blockquote><script src="https://gist.github.com/giioohbernini/d3b6b6340df0705d9dc76bec858f93db.js"></script><p>O routeChange verifica se o href existe e, caso exista, ele atualiza o estado que informa a url atual e também atualiza o status do canGoBack, que é quem controla se o app pode ou não fechar em uma ação de voltar.</p><p>Com tudo isso pronto e explicado, agora temos a informação da url atual no lado do <em>React Native</em> e podemos manipular a cor do sistema para que sempre fique igual ao topo da aplicação web.</p><blockquote><p>Arquivo: src/pages/Main/hooks/propsMapper.js</p></blockquote><script src="https://gist.github.com/giioohbernini/bcd0546c3680cad1faa33133896d3f9f.js"></script><p>No custom hooks acima, pegamos a url atual que é passada para ele, extraimos a url limpa de <em>query strings</em> e passamos para a função getUrlToStatusBarColor, que está mapeando as urls e as respectivas cores e então retornamos isso diretamente para o componente Main que vai passar para o componente StatusBar.</p><blockquote><p>Trecho do arquivo: src/constants/webview.js</p></blockquote><script src="https://gist.github.com/giioohbernini/0631b3cde4f8533035490ea5f16d4aa3.js"></script><p>Estamos adicionando no código acima as cores no mapa por url.</p><blockquote><p>Trecho do arquivo: pages/Main/index.js</p></blockquote><script src="https://gist.github.com/giioohbernini/d413959c14ef76dfe29000446557960c.js"></script><p>No código acima, passamos a propriedade da cor para o StatusBar e para o SafeAreaView para de fato fazer as cores alterarem, vamos ver como ficou! Se você já estiver com o projeto rodando é só atualizar, se não tiver é só rodar o yarn ios ou yarn android ou olhar o gif abaixo:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*FDNzg5mc5c2ZZgEt78gs4A.gif" alt></p><p><a href="https://github.com/giioohbernini/web-to-native" target="_blank" rel="noopener">Repositório</a> com o código que desenvolvemos aqui nesse artigo.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Encerro por aqui esse artigo, mas se quiser saber mais sobre essa implementação, leia a <a href="https://medium.com/@giovannibernini/como-transformar-uma-aplica%C3%A7%C3%A3o-web-react-em-um-aplicativo-nativo-da-noite-para-o-dia-6116b247f069" target="_blank" rel="noopener">primeira parte desse post</a>, onde mostro como chegamos nessa solução, o motivo e os ganhos que você pode ter caso esteja em um cenário parecido.</p><p>Espero que consigam adaptar no cenário de vocês e qualquer dúvida ou sugestão estarei respondendo os campos de comentários, obrigado!</p><h2 id="Links-uteis"><a href="#Links-uteis" class="headerlink" title="Links úteis"></a>Links úteis</h2><p><a href="https://github.com/react-native-community/react-native-webview/blob/master/docs/Reference.md#injectedjavascript" target="_blank" rel="noopener">Método postMessage que o React Native injeta no window</a><br><a href="https://github.com/react-native-community/react-native-webview/blob/master/docs/Reference.md#onmessage" target="_blank" rel="noopener">Parâmetro onMessage do componente WebView</a><br><a href="https://github.com/giioohbernini/web-to-native" target="_blank" rel="noopener">Repositório com o código do artigo</a><br><a href="https://github.com/react-native-community/react-native-webview/blob/master/docs/Reference.md#postmessagestr" target="_blank" rel="noopener">Método postMessage do componente WebView</a><br><a href="https://medium.com/@giovannibernini/como-transformar-uma-aplica%C3%A7%C3%A3o-web-react-em-um-aplicativo-nativo-da-noite-para-o-dia-6116b247f069" target="_blank" rel="noopener">Parte um desse artigo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Separei esse artigo em duas partes. Na segunda parte que você está lendo agora, entrarei mais afundo e criarei do zero a arquitetura,
      
    
    </summary>
    
      <category term="artigos" scheme="https://giovannibernini.com.br/categorias/artigos/"/>
    
    
      <category term="React" scheme="https://giovannibernini.com.br/tags/React/"/>
    
      <category term="React Native" scheme="https://giovannibernini.com.br/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Transformando uma aplicação React em um aplicativo nativo (Parte 1)</title>
    <link href="https://giovannibernini.com.br/transformando-uma-aplicacao-react-em-um-aplicativo-nativo-parte-1/"/>
    <id>https://giovannibernini.com.br/transformando-uma-aplicacao-react-em-um-aplicativo-nativo-parte-1/</id>
    <published>2020-08-11T01:51:44.000Z</published>
    <updated>2020-08-11T02:26:46.025Z</updated>
    
    <content type="html"><![CDATA[<p><em>Separei esse artigo em duas partes. A primeira que você está lendo agora trata-se da origem do problema em questão e como resolvemos. Na outra parte entro mais afundo e crio do zero essa estrutura explicando passo a passo.</em></p><p>Alguns meses atrás, por causa de uma necessidade aqui na Red Ventures (onde trabalho atualmente), me deparei com essa pergunta:</p><blockquote><h1 id="Como-transformar-uma-aplicacao-React-em-um-aplicativo-iOS-e-Android-de-uma-maneira-rapida-que-aproveite-o-codebase-atual-e-seja-escalavel"><a href="#Como-transformar-uma-aplicacao-React-em-um-aplicativo-iOS-e-Android-de-uma-maneira-rapida-que-aproveite-o-codebase-atual-e-seja-escalavel" class="headerlink" title="Como transformar uma aplicação React em um aplicativo (iOS e Android) de uma maneira rápida, que aproveite o codebase atual e seja escalável?"></a>Como transformar uma aplicação React em um aplicativo (iOS e Android) de uma maneira rápida, que aproveite o codebase atual e seja escalável?</h1></blockquote><p>Logo de cara, notamos que seria necessário usar um <em>browser</em> para renderizar a aplicação já existente e alguma ferramenta para gerar tanto o aplicativo Android como o iOS com a mesma codebase, mas ainda existiam algumas dúvidas:</p><ul><li><p>A aplicação está em constante mudança. Desse modo, faz sentido uma soluçao como Cordova/Phonegap, que para qualquer alteração seria necessário soltar uma atualização na loja?</p></li><li><p>Caso a aplicação tenha engajamento, como faremos para escalar para um aplicativo nativo sem precisar matar tudo de uma vez e começar do zero? Como faremos essa transição gradual caso for preciso?</p></li></ul><h2 id="Testando-solucoes"><a href="#Testando-solucoes" class="headerlink" title="Testando soluções"></a>Testando soluções</h2><p>A partir daí, comecei a realizar algumas pesquisas e fazer algumas POC’s.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*hC1TjdmGFkZNFYEk" alt></p><p>Por não facilitar a atualização do aplicativo e não ser escalável para uma experiência nativa, concluímos em não seguir com Cordova/Phonegap, mas ir para um caminho que tivesse esses benefícios. Porém, nossa aplicação web, apesar de já estar preparada para uso mobile, ainda precisava de alguns ajustes para o uso em aplicativo, como por exemplo uma tela inicial específica.</p><p>Então resolvemos gerar duas aplicações com o mesmo processo de build existente da aplicação web, por exemplo:</p><blockquote><p><em>Aplicação já existente: <a href="https://meusite.com.br/" target="_blank" rel="noopener">https://meusite.com.br/</a></em><br><em>Nova aplicação: <a href="https://meusite.com.br/app/" target="_blank" rel="noopener">https://meusite.com.br/app/</a></em></p></blockquote><p>As duas aplicações seguiram exatamente com o mesmo codebase, a única diferença foi a necessidade de disponibilizar uma variável global dentro da aplicação em tempo de <em>build</em> informando o valor “App” ou “Web”, o que na prática foi só adicionar mais um passo no processo de <em>build/deploy</em>. Com isso foi possível criar condições como qual tela inicial mostrar.</p><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*NgtuJZI8475e7pa0.png" alt></p><p>Com a parte web resolvida e depois de alguns outros testes, decidi fazer uma POC com React Native (uma ferramenta do Facebook que muita gente conhece ou já ouviu falar), pois resolveria o problema da geração do app para Android e iOS e eu já tinha um conhecimento básico prévio. Em menos de uma hora, a POC já tinha atendido quase todas as necessidades, mas ainda faltava uma coisa para fechar a solução: a comunicação entre o nativo e o <em>browser.</em></p><p>Olhando a documentação da ferramenta, descobri que quando o React Native monta um componente WebView, ele sempre injeta um método chamado ReactNativeWebView.postMessageno window da página que foi carregada, dessa maneira eu consegui fazer minha aplicação web passar informações para o nativo e vice-versa.</p><p>Olha só essa lista de coisas que foram possíveis fazer por causa dessa comunicação:</p><ul><li><p>Escalabilidade. Posso agora ter em paralelo tanto telas nativas feitas diretamente no React Native como telas da aplicação web</p></li><li><p>Escutar o evento de backPressque é disparado quando o botão de voltar do celular é acionado</p></li><li><p>Usar o push notification</p></li><li><p>Usar as <em>features</em> de biometria, como o <em>faceId</em></p></li><li><p>Executar qualquer outra função nativa</p></li></ul><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*Mn6YEQbshFyZopQp" alt></p><p>Essa solução resolveu muito bem o problema e espero que ajude na criação de novas soluções para quem está lendo!</p><p>Vou deixar abaixo o link para o próximo post, onde irei mostrar como construir do zero, passo a passo, toda a estrutura que eu descrevi ao longo desse artigo, com uma aplicação web que utilizará React, mas que pode ter como base qualquer outra biblioteca ou até mesmo vanilla.</p><p><a href="https://medium.com/@giovannibernini/como-transformar-uma-aplica%C3%A7%C3%A3o-web-react-em-um-aplicativo-nativo-da-noite-para-o-dia-parte-2-36d9adb5b3ad" target="_blank" rel="noopener">Próximo post</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Separei esse artigo em duas partes. A primeira que você está lendo agora trata-se da origem do problema em questão e como resolvemos.
      
    
    </summary>
    
      <category term="artigos" scheme="https://giovannibernini.com.br/categorias/artigos/"/>
    
    
      <category term="React" scheme="https://giovannibernini.com.br/tags/React/"/>
    
      <category term="React Native" scheme="https://giovannibernini.com.br/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Softwares de prototipação no linux, existem?</title>
    <link href="https://giovannibernini.com.br/Softwares-de-prototipacao-no-linux-existem/"/>
    <id>https://giovannibernini.com.br/Softwares-de-prototipacao-no-linux-existem/</id>
    <published>2017-06-02T15:33:25.000Z</published>
    <updated>2020-08-11T01:43:50.323Z</updated>
    
    <content type="html"><![CDATA[<p>Sem enrolações, hoje irei falar desses dois caras</p><ul><li><a href="https://www.figma.com/" target="_blank" rel="noopener">Figma</a></li><li><a href="https://app.designer.io/" target="_blank" rel="noopener">Design.io</a> / <a href="https://gravit.io/workspace" target="_blank" rel="noopener">Gravit.io</a> (O gravit.io é a versão “cloud” do design.io que eu citarei no vídeo e no texto)</li></ul><p>Fiz um vídeo explicando o básico das duas ferramentas, mas para quem preferir ler, continue lendo que farei um resumo em texto também! </p><div class="embed-container"><iframe style="width: 100%; height: 400px;" src="https://www.youtube.com/embed/FMBFXphyP7w" frameborder="0" allowfullscreen></iframe></div><h2 id="Links-importantes"><a href="#Links-importantes" class="headerlink" title="Links importantes"></a>Links importantes</h2><ul><li><p>Figma</p><ul><li><a href="https://www.youtube.com/watch?v=DjdSnBwHgD8" target="_blank" rel="noopener">Recriando a logo do instagram</a></li><li><a href="https://www.youtube.com/watch?v=RLRVv7JXvco" target="_blank" rel="noopener">Components</a></li><li><a href="https://www.youtube.com/watch?v=b-xDRjf5B-8" target="_blank" rel="noopener">Trabalhando com vetores</a></li><li><a href="https://help.figma.com/" target="_blank" rel="noopener">Documentação</a></li><li><a href="https://material.uplabs.com/posts/onboarding-icons-animation-interface" target="_blank" rel="noopener">Exemplos</a></li></ul></li><li><p>Design.io / Gravit.io</p><ul><li><a href="https://medium.com/gravitdesigner/design-a-professional-logo-using-gravit-835408f7fd9d" target="_blank" rel="noopener">Criando uma logo</a></li><li><a href="https://www.youtube.com/channel/UC_HHKxxyeAzbxWDhQw8b7jA/videos" target="_blank" rel="noopener">Canal do YouTube deles, com muita informação</a></li><li><a href="https://www.youtube.com/watch?v=NelyeOMVufs" target="_blank" rel="noopener">Criando ícones</a></li><li><a href="https://dribbble.com/gravit" target="_blank" rel="noopener">Dribbble</a></li><li><a href="https://gravit.io/discover" target="_blank" rel="noopener">Exemplos</a></li></ul></li></ul><h2 id="Qual-e-o-publico-alvo-dessas-ferramentas"><a href="#Qual-e-o-publico-alvo-dessas-ferramentas" class="headerlink" title="Qual é o público-alvo dessas ferramentas?"></a>Qual é o público-alvo dessas ferramentas?</h2><p>Acredito que essas ferramentas, mesmo sendo ótimas e MUITO intuitivas elas não tomaram o espaço de ferramentas já conhecidas no mercado, como Sketch e as ferramentas da adobe em geral, mas para usuário mais “casuais”, que não nescessariamente são designers, mas que também precisam prototipar alguma coisa antes de sair fazendo, com certeza essas ferramentas terão seu espaço para essas pessoas.</p><ul><li><p>Pontos positivos</p><ul><li>Fácil acesso, em qualquer browser da atualidade você pode acessar a ferramenta.</li><li>Cloud, isso somado com o ponto acima, é um combo enorme! Além de você ter acesso em qualquer lugar praticamente, você ainda tem o seu projeto disponivel do lugar que você parou, em qualquer lugar.</li><li>Planos Free, tanto o figma quando o gravit tem planos free excelentes, quase não existe a necessidade de adquirir o plano pago.</li></ul></li><li><p>Pontos negativos</p><ul><li>Eu sinceramente não consegui enxergar pontos negativos, acredito que no ponto de vista de um designer, seja mais fácil atribuir os pontos negativos, mas para mim não teve nenhum!!</li></ul></li></ul><p>Esse blog é opensource!! Então caso veja algo errado ou queira acrescentar algo é so criar uma issue ou mandar um PR lá no <a href="https://github.com/giioohbernini/giioohbernini.github.io/" target="_blank" rel="noopener">github</a>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sem enrolações, hoje irei falar desses dois caras&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.figma.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Figma&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="artigos" scheme="https://giovannibernini.com.br/categorias/artigos/"/>
    
    
      <category term="Linux" scheme="https://giovannibernini.com.br/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CakeRecipe meu novo gulp boilerplate</title>
    <link href="https://giovannibernini.com.br/CakeRecipe-meu-novo-gulp-boilerplate/"/>
    <id>https://giovannibernini.com.br/CakeRecipe-meu-novo-gulp-boilerplate/</id>
    <published>2017-01-19T15:26:07.000Z</published>
    <updated>2020-08-11T01:57:16.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cake-Recipe-Um-boilerplate-para-Gulp"><a href="#Cake-Recipe-Um-boilerplate-para-Gulp" class="headerlink" title="Cake Recipe - Um boilerplate para Gulp."></a>Cake Recipe - Um boilerplate para Gulp.</h1><p>Projeto open source, feito com foco em espalhar o conhecimento, e para o uso do dia-a-dia!</p><h2 id="Tecnologias-usadas"><a href="#Tecnologias-usadas" class="headerlink" title="Tecnologias usadas:"></a>Tecnologias usadas:</h2><ul><li>Gulp</li><li>JavaScipt (Node)</li><li>Sass</li></ul><h2 id="Funcoes"><a href="#Funcoes" class="headerlink" title="Funções:"></a>Funções:</h2><ul><li>Automatiza a minificação do seus códigos HTML/CSS/JS</li><li>Alta performance para desenvolvimento com o uso do <code>gulp watch</code></li><li>Transpila SASS para CSS</li><li>Minifica imagens</li></ul><p>Esse projeto está disponível no <a href="https://github.com/giioohbernini/cakerecipe" target="_blank" rel="noopener">Github</a> <del>e com o coração aberto para pull request :D</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cake-Recipe-Um-boilerplate-para-Gulp&quot;&gt;&lt;a href=&quot;#Cake-Recipe-Um-boilerplate-para-Gulp&quot; class=&quot;headerlink&quot; title=&quot;Cake Recipe - Um boi
      
    
    </summary>
    
      <category term="projetos" scheme="https://giovannibernini.com.br/categorias/projetos/"/>
    
    
      <category term="Labs" scheme="https://giovannibernini.com.br/tags/Labs/"/>
    
      <category term="Gulp" scheme="https://giovannibernini.com.br/tags/Gulp/"/>
    
  </entry>
  
</feed>
